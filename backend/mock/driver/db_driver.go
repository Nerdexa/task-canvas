// Code generated by MockGen. DO NOT EDIT.
// Source: ./driver/generated/querier.go
//
// Generated by this command:
//
//	mockgen -source=./driver/generated/querier.go -destination=./mock/driver/db_driver.go
//

// Package mock_db_driver is a generated GoMock package.
package mock_db_driver

import (
	context "context"
	reflect "reflect"
	db_driver "task-canvas/driver/generated"

	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// FindTodo mocks base method.
func (m *MockQuerier) FindTodo(ctx context.Context) ([]db_driver.TaskCanvasTodo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTodo", ctx)
	ret0, _ := ret[0].([]db_driver.TaskCanvasTodo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTodo indicates an expected call of FindTodo.
func (mr *MockQuerierMockRecorder) FindTodo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTodo", reflect.TypeOf((*MockQuerier)(nil).FindTodo), ctx)
}
