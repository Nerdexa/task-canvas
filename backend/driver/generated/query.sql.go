// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db_driver

import (
	"context"

	uuid "github.com/google/uuid"
)

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM task_canvas.todo
WHERE
  id = $1::uuid
`

func (q *Queries) DeleteTodo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTodo, id)
	return err
}

const findTodo = `-- name: FindTodo :many
SELECT
  id,
  content,
  completed
FROM
  task_canvas.todo
`

func (q *Queries) FindTodo(ctx context.Context) ([]TaskCanvasTodo, error) {
	rows, err := q.db.Query(ctx, findTodo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskCanvasTodo
	for rows.Next() {
		var i TaskCanvasTodo
		if err := rows.Scan(&i.ID, &i.Content, &i.Completed); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTodo = `-- name: InsertTodo :exec
INSERT INTO
task_canvas.todo (
  id,
  content,
  completed
)
VALUES (
  $1,
  $2,
  $3
)
`

type InsertTodoParams struct {
	ID        uuid.UUID `json:"id"`
	Content   string    `json:"content"`
	Completed bool      `json:"completed"`
}

func (q *Queries) InsertTodo(ctx context.Context, arg InsertTodoParams) error {
	_, err := q.db.Exec(ctx, insertTodo, arg.ID, arg.Content, arg.Completed)
	return err
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE task_canvas.todo
SET
  content = $2,
  completed = $3
WHERE
  id = $1
`

type UpdateTodoParams struct {
	ID        uuid.UUID `json:"id"`
	Content   string    `json:"content"`
	Completed bool      `json:"completed"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.Exec(ctx, updateTodo, arg.ID, arg.Content, arg.Completed)
	return err
}
